type SimpifyShop {
    uid: ID! @doc(description: "The unique ID for a `SimpifyShop` object.")
    shop_domain: String @doc(description: "The shop domain.")
    shop_name: String @doc(description: "The shop name")
    shop_email: String @doc(description: "Shop email")
#    shop_industry: String @doc(description: "Shop industry")
#    shop_owner_email: String @doc(description: "Shop Owner Email")
#    shop_owner_name: String @doc(description: "Shop Owner Name")
    status: String @doc(description: "Shop status, 1: installed. 0: uninstalled, 9: installation not completed.")
    more_info: ShopMoreInfo @doc(description: "More Info About shop in JSON format")
    app_info: String @doc(description: "App Info in json")
    plan_id: String @doc(description: "Subscription Plan ID")
    plan: SimpifyPlan @doc(description: "Subscription Plan")
    created_at: String @doc(description: "App first installation Time")
}

type SimpifyApp {
    uid: ID! @doc(description: "The unique ID for a `SimpifyApp` object.")
    app_name: String @doc(description: "App Name")
    status: String @doc(description: "App status, 0: Inactive, has other clone from current app instead, 1: current active.")
    app_logo: String @doc(description: "App Logo url")
    app_icon: String @doc(description: "App Logo icon url")
    splash_image: String @doc(description: "App splash url")
    splash_bg_color: String @doc(description: "App splash color string")
    splash_is_full: Boolean @doc(description: "App splash is full?")
    completed_progress: [String] @doc(description: "Completed step keys")
    updated_at: String @doc(description: "Updated time")
    created_at: String @doc(description: "Creation time")
    layout: SimpifyAppLayout @doc(description: "App layout") @resolver(class: "SimiCart\\SimpifyManagementGraphql\\Model\\Resolver\\GetAppLayout")
}

type Query {
    simpifyShop: SimpifyShop @resolver(class: "SimiCart\\SimpifyManagementGraphql\\Model\\Resolver\\SimpifyShop") @doc(description: "The shimpifyShop query returns information about a shopify shop.")
    lastUpdatedApp: SimpifyApp @resolver(class: "SimiCart\\SimpifyManagementGraphql\\Model\\Resolver\\GetLastUpdatedApp") @doc(description: "The query returns information about last updated app from a shop.")
    simpifyAuthenticateShop(query: String): AuthShopOutput @resolver(class: "SimiCart\\SimpifyManagementGraphql\\Model\\Resolver\\AuthenticateShop")
    apps(
        filters: AppFilterInput @doc(description: "Identifies which App filter inputs to search for and return.")
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional.")
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
    ): AppSearchResult @resolver(class: "SimiCart\\SimpifyManagementGraphql\\Model\\Resolver\\GetApps") @doc(description: "Get all apps")
    appTexts: [String] @resolver(class: "SimiCart\\SimpifyManagementGraphql\\Model\\Resolver\\GetAppTexts")
    themes: [SimpifyTheme] @resolver(class: "SimiCart\\SimpifyManagementGraphql\\Model\\Resolver\\GetThemes") @doc(description: "Get all themes")
}
type AppSearchResult @doc(description: "A collection of App objects and pagination information.") {
    items: [SimpifyApp] @doc(description: "A list of apps that match the filter criteria.")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
    total_count: Int @doc(description: "The total number of apps that match the criteria.")
}
type SimpifyTheme {
    uid: ID! @doc(description: "The unique ID for a `SimpifyTheme` object.")
    name: String @doc(description: "Theme name")
    preview_images: [ThemePreviewImage] @doc(description: "Theme preview images")
    image: String @doc(description: "Theme image url")
    is_active: Boolean @doc(description: "Theme is active or not")
    colors: [PairedKeyValue] @doc(description: "Theme allowed/predefined color fields")
}
type ThemePreviewImage {
    url: String @doc(description: "Image url")
    position: Int @doc(description: "Image position")
    label: String @doc(description: "Image label")
}
type Mutation {
    updateShopInformation(input: SimpifyShopInput): SimpifyShop  @doc(description: "Update shop information.") @resolver(class: "SimiCart\\SimpifyManagementGraphql\\Model\\Resolver\\UpdateShopInformation")
    generateLanguageTextExample(code: String! @doc(description: "Language code"), app_id: Int!): LanguageTextExampleOutput @doc(description: "Generate/Get language examples text data") @resolver(class: "SimiCart\\SimpifyManagementGraphql\\Model\\Resolver\\GenerateLanguageTextExample")
    saveApp(input: SimpifyAppInput): SimpifyApp @doc(description: "Create/update an app") @resolver(class: "SimiCart\\SimpifyManagementGraphql\\Model\\Resolver\\CreateApp")
}
input AppFilterInput  @doc(description: "AppFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.")
{
    uid: FilterEqualTypeInput @doc(description: "Filter by the unique category ID for a `CategoryInterface` object.")
    status: FilterEqualTypeInput @doc(description: "Filter by the status of app.")
    shop_uid: FilterEqualTypeInput @doc(description: "Just defined for search scriteria. Not use for filter.")
    industry: FilterEqualTypeInput @doc(description: "industry string code")
    app_name: FilterMatchTypeInput @doc(description: "App Name.")
    app_logo: FilterTypeInput @doc(description: "The app logo image")
    app_icon: FilterTypeInput @doc(description: "The app icon image")
    splash_image: FilterTypeInput @doc(description: "The splash image")
    splash_bg_color: FilterTypeInput @doc(description: "The splash image")
    splash_is_full: FilterEqualTypeInput @doc(description: "The splash loading screen is full or not")
    created_at: FilterTypeInput @doc(description: "The created time")
    updated_at: FilterTypeInput @doc(description: "The updated time")
}

input SimpifyAppInput @doc(description: "App input. If you dont want to update any field, just dont pass it. If you want to remove a field, just set it to null.") {
    app_id: ID @doc(description: "App ID. This field can not remove")
    app_name: String @doc(description: "App name. This field can not remove")
    industry: String @doc(description: "Shop industry. This field can not remove")
    app_logo: FileInput @doc(description: "App logo, removable")
    app_icon: FileInput @doc(description: "App icon, removable")
    splash_image: FileInput @doc(description: "App splash loading image, removable")
    splash_is_full: Boolean @doc(description: "Splash is full, if you remove this field, it will be set to true as default")
    splash_bg_color: String @doc(description: "Splash background color, if you remove this field, it will be set to #ffffff as default")
    layout: SimpifyAppLayoutInput @doc(description: "App layout")
}

input SimpifyAppLayoutInput @doc(description: "App layout input. If you dont want to update any field, just dont pass it. If you want to remove a field, just set it to null.") {
    font: String @doc(description: "Font")
    colors: [PairedKeyValueInput] @doc(description: "Colors")
    menu: String @doc(description: "Menu layout data")
    homepage: String @doc(description: "Homepage layout data")
    collection_page: String @doc(description: "Collection page layout data")
    product_page: String @doc(description: "Product page layout data")
    landing_page: String @doc(description: "Landing page layout data")
    theme_uid: ID @doc(description: "Applied Theme UID")
}

input FileInput @doc(description: "Define file input. Currently, we only support base64 content") {
    # base64_content: String @doc(description: "Base64 content, using base64 content or use file, not both. Currently, we only support base64 content")
    name: String @doc(description: "File name not include extension")
    type: String @doc(description: "File mime type")
    file: String @doc(description: "File tmp path")
}

type SimpifyAppLayout {
    uid: ID! @doc(description: "The unique ID for a `SimpifyAppLayout` object.")
    font: String @doc(description: "Font")
    colors: [PairedKeyValue] @doc(description: "Colors")
    menu: String @doc(description: "Menu layout data")
    homepage: String @doc(description: "Homepage layout data")
    collection_page: String @doc(description: "Collection page layout data")
    product_page: String @doc(description: "Product page layout data")
    landing_page: String @doc(description: "Landing page layout data")
    theme: SimpifyTheme @doc(description: "Applied Theme") @resolver(class: "SimiCart\\SimpifyManagementGraphql\\Model\\Resolver\\GetAppliedTheme")
}

type LanguageTextExampleOutput {
    download_link: String @doc(description: "Download link")
}

type AuthShopOutput {
    success: Boolean,
    type: String,
    redirect_url: String,
    message: String,
    access_token: String,
    app_api_key: String
}

input AuthShopParam {
    hmac: String,
    host: String,
    shop: String,
    timestamp: String
}
input SimpifyShopInput {
    more_info: ShopMoreInfoInput
}

input ShopMoreInfoInput {
    industry: String!
    shop_owner_name: String!
    shop_owner_email: String!
    how_you_know_us: [PairedKeyValueInput]
}
input PairedKeyValueInput {
    key: String
    value: String
    label: String
}

type SimpifyPlan {
    plan_id: Int
    plan_name: String
}

type ShopMoreInfo {
    industry: String @doc(description: "Shop/App industry.")
    shop_owner_name: String @doc(description: "Shop owner name.")
    shop_owner_email: String @doc(description: "Shop owner email.")
    how_you_know_us: [PairedKeyValue] @doc(description: "How you know Simpify.")
}

type PairedKeyValue {
    key: String
    value: String
    label: String
}
